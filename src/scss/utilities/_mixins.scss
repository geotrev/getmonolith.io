@mixin flex(
  $display: null,
  $direction: null,
  $wrap: null,
  $grow: null,
  $shrink: null,
  $basis: null,
  $align: null
) {
  display: $display;
  flex-flow: $direction $wrap;
  flex: $grow $shrink $basis;
  align-items: $align;
}

@mixin grid-classes($size) {
  @for $i from 1 through $columns {
    .#{$size}-#{$i} {
      @include flex($grow: 0, $shrink: 0, $basis: percentage($i / $columns));
      max-width: percentage($i / $columns);
    }

    @if $column-offset-classes == true {
      .#{$size}-offset-#{$i} {
        margin-left: percentage($i / $columns);
      }
    }

    @if $column-order-classes == true {
      // order-1 = -12
      // order-2 = -11
      // etc...
      .#{$size}-order-#{$i} {
        order: $i - 1 - $columns;
      }
    }
  }
}

@mixin breakpoint-up($size) {
  @media screen and (min-width: #{breakpoint($size)}) {
    @content;
  }
}

@mixin breakpoint-down($size) {
  @media screen and (max-width: #{breakpoint($size) - 1}) {
    @content;
  }
}

@mixin breakpoint-between($min, $max) {
  @media screen
    and (min-width: #{breakpoint($min)})
    and (max-width: #{breakpoint($max) - 1}) {
    @content;
  }
}

@mixin header-sizes($headers) {
  @each $header, $properties in $headers {
    #{$header},
    .#{$header} {
      @each $property, $value in $properties {
        #{$property}: $value;
      }
    }
  }
}

// this mixin is used for arrow mixins/CSS below and in src/scss/components/_dropdown.scss
@mixin if-has-arrow {
  &:not(.has-no-arrow) {
    @content;
  }
}

// These values calculate a consistent arrow fill (inner) and arrow border (outer),
// given any value of $arrow-size from _config.scss
// partial pixel values are used to prevent some browsers from clipping the edge
$arrow-fill-position: $arrow-size * -2 + 1.5px;
$arrow-border-position: $arrow-size * -2;

@mixin arrow-base {
  content: "";
  border-bottom: $arrow-size solid transparent;
  border-top: $arrow-size solid transparent;
  border-left: $arrow-size solid transparent;
  border-right: $arrow-size solid transparent;
  position: absolute;
}

@mixin up-arrow($edge-offset, $fill-color, $border-color) {
  @include if-has-arrow {
    &::after {
      @include arrow-base;
      border-bottom: $arrow-size solid $fill-color;
      top: $arrow-fill-position;
      left: $edge-offset;
      right: auto;
      bottom: auto;
    }

    &::before {
      @include arrow-base;
      border-bottom: $arrow-size solid $border-color;
      top: $arrow-border-position;
      left: $edge-offset;
      right: auto;
      bottom: auto;
    }
  }
}

@mixin down-arrow($edge-offset, $fill-color, $border-color) {
  @include if-has-arrow {
    &::after {
      @include arrow-base;
      border-top: $arrow-size solid $fill-color;
      bottom: $arrow-fill-position;
      left: $edge-offset;
      top: auto;
      right: auto;
    }

    &::before {
      @include arrow-base;
      border-top: $arrow-size solid $border-color;
      bottom: $arrow-border-position;
      left: $edge-offset;
      top: auto;
      right: auto;
    }
  }
}

@mixin right-arrow($edge-offset, $fill-color, $border-color) {
  @include if-has-arrow {
    &::after {
      @include arrow-base;
      border-left: $arrow-size solid $fill-color;
      right: $arrow-fill-position;
      top: $edge-offset;
      left: auto;
      bottom: auto;
    }

    &::before {
      @include arrow-base;
      border-left: $arrow-size solid $border-color;
      right: $arrow-border-position;
      top: $edge-offset;
      left: auto;
      bottom: auto;
    }
  }
}

@mixin left-arrow($edge-offset, $fill-color, $border-color) {
  @include if-has-arrow {
    &::after {
      @include arrow-base;
      border-right: $arrow-size solid $fill-color;
      left: $arrow-fill-position;
      top: $edge-offset;
      bottom: auto;
      right: auto;
    }

    &::before {
      @include arrow-base;
      border-right: $arrow-size solid $border-color;
      left: $arrow-border-position;
      top: $edge-offset;
      bottom: auto;
      right: auto;
    }
  }
}

@mixin visibility($size) {
  .is-flex-#{$size} {
    display: flex !important;
  }

  .is-block-#{$size} {
    display: block !important;
  }

  .is-hidden-#{$size} {
    display: none !important;
  }
}

@mixin input-field-base-properties {
  background: $input-background;
  appearance: none;
  border-radius: $input-border-radius;
  border: $input-border;
  box-shadow: $input-box-shadow;
  font-family: $input-font-family;
  font-size: $input-font-size;
  margin: $input-margin;
  padding: $input-padding;
}

@mixin input-field-interacted-properties {
  transition: $global-transition;

  &:focus,
  &:active {
    background: $input-focus-background !important;
    border: $input-focus-border !important;
    box-shadow: $input-focus-box-shadow !important;
  }

  &:hover {
    background: $input-hover-background;
    border: $input-hover-border;
    box-shadow: $input-hover-box-shadow;
    transition: $global-transition;
  }
}

@mixin input-element-disabled-properties {
  background: $input-disabled-background !important;
  border: $input-disabled-border !important;
  color: $input-disabled-color !important;
  cursor: not-allowed;
  resize: $input-disabled-resize !important;
  opacity: 1;

  &:hover {
    background: $input-disabled-background !important;
    border: $input-disabled-border !important;
    color: $input-disabled-color !important;
  }
}

@mixin input-of-type-disabled($type) {
  input[type="#{$type}"]:disabled,
  input[type="#{$type}"].disabled {
    @include input-element-disabled-properties;
  }
}

@mixin no-scroll {
  .no-scroll {
    overflow: hidden !important;
  }
}

@mixin using-keyboard {
  // stylelint-disable
  .using-keyboard
    *:not([type="text"]):not([type="email"]):not([type="password"]):not([type="search"]):not([type="url"]):not(textarea):not(select):focus {
    outline: $global-outline-using-keyboard !important;
  }
  // stylelint-enable
}
