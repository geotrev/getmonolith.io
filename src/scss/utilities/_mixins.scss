@mixin create-flow-property($property, $value) {
  $rtl-property: $property;
  $rtl-value: $value;

  @if type-of($value) == string {
    @if str-index($value, "left") {
      $rtl-value: str-replace($value, "left", "right");
    } @else if str-index($value, "right") {
      $rtl-value: str-replace($value, "right", "left");
    }
  }

  @if str-index($property, "left") {
    $rtl-property: str-replace($property, "left", "right");
  } @else if str-index($property, "right") {
    $rtl-property: str-replace($property, "right", "left");
  }

  html:not([dir="rtl"]) & {
    #{$property}: $value;
  }

  html[dir="rtl"] & {
    #{$rtl-property}: $rtl-value;
  }
}

@mixin create-grid-classes($size) {
  @for $i from 1 through $grid-columns {
    .is-#{$size}-#{$i} {
      flex: 0 0 percentage($i / $grid-columns);
      max-width: percentage($i / $grid-columns);
    }

    @if $grid-column-offset-classes-enabled {
      .is-#{$size}-offset-#{$i} {
        @include create-flow-property("margin-left", percentage($i / $grid-columns));
      }
    }

    @if $grid-column-order-classes-enabled {
      // order-1 = -12
      // order-2 = -11
      // etc...
      .is-#{$size}-order-#{$i} {
        order: $i - 1 - $grid-columns;
      }
    }
  }
}

@mixin create-breakpoint($size) {
  @media screen and (min-width: #{breakpoint-value($size)}) {
    @content;
  }
}

@mixin create-breakpoint-down($size) {
  @media screen and (max-width: #{breakpoint-value($size) - 1}) {
    @content;
  }
}

@mixin create-breakpoint-between($min, $max) {
  @media screen
    and (min-width: #{breakpoint-value($min)})
    and (max-width: #{breakpoint-value($max) - 1}) {
    @content;
  }
}

@mixin create-headers($headers) {
  @each $header, $properties in $headers {
    #{$header},
    .#{$header} {
      @each $property, $value in $properties {
        #{$property}: $value;
      }
    }
  }
}

// this mixin is used for arrow mixins/CSS below and in src/scss/components/_dropdown.scss
@mixin with-arrow-enabled {
  &:not(.has-no-arrow) {
    @content;
  }
}

// These values calculate a consistent arrow fill (inner) and arrow border (outer),
// given any value of $global-arrow-size from _config.scss
// partial pixel values are used to prevent some browsers from clipping the edge
$arrow-fill-position: $global-arrow-size * -2 + 1.5px;
$arrow-border-position: $global-arrow-size * -2;

@mixin create-arrow-base-styles {
  border-left: $global-arrow-size solid transparent;
  border-right: $global-arrow-size solid transparent;
  border-bottom: $global-arrow-size solid transparent;
  border-top: $global-arrow-size solid transparent;
  content: "";
  position: absolute;
}

@mixin create-up-arrow($edge-offset, $fill-color, $border-color) {
  @include with-arrow-enabled {
    &::after {
      @include create-arrow-base-styles;
      @include create-flow-property("left", $edge-offset);
      @include create-flow-property("right", auto);
      top: $arrow-fill-position;
      bottom: auto;
      border-bottom: $global-arrow-size solid $fill-color;
    }

    &::before {
      @include create-arrow-base-styles;
      @include create-flow-property("left", $edge-offset);
      @include create-flow-property("right", auto);
      top: $arrow-border-position;
      bottom: auto;
      border-bottom: $global-arrow-size solid $border-color;
    }
  }
}

@mixin create-down-arrow($edge-offset, $fill-color, $border-color) {
  @include with-arrow-enabled {
    &::after {
      @include create-arrow-base-styles;
      @include create-flow-property("left", $edge-offset);
      @include create-flow-property("right", auto);
      bottom: $arrow-fill-position;
      top: auto;
      border-top: $global-arrow-size solid $fill-color;
    }

    &::before {
      @include create-arrow-base-styles;
      @include create-flow-property("left", $edge-offset);
      @include create-flow-property("right", auto);
      bottom: $arrow-border-position;
      top: auto;
      border-top: $global-arrow-size solid $border-color;
    }
  }
}

@mixin create-right-arrow($edge-offset, $fill-color, $border-color) {
  @include with-arrow-enabled {
    &::after {
      @include create-arrow-base-styles;
      @include create-flow-property("border-left", $global-arrow-size solid $fill-color);
      @include create-flow-property("right", $arrow-fill-position);
      @include create-flow-property("left", auto);
      top: $edge-offset;
      bottom: auto;
    }

    &::before {
      @include create-arrow-base-styles;
      @include create-flow-property("border-left", $global-arrow-size solid $border-color);
      @include create-flow-property("right", $arrow-border-position);
      @include create-flow-property("left", auto);
      top: $edge-offset;
      bottom: auto;
    }
  }
}

@mixin create-left-arrow($edge-offset, $fill-color, $border-color) {
  @include with-arrow-enabled {
    &::after {
      @include create-arrow-base-styles;
      @include create-flow-property("border-right", $global-arrow-size solid $fill-color);
      @include create-flow-property("left", $arrow-fill-position);
      @include create-flow-property("right", auto);
      top: $edge-offset;
      bottom: auto;
    }

    &::before {
      @include create-arrow-base-styles;
      @include create-flow-property("border-right", $global-arrow-size solid $border-color);
      @include create-flow-property("left", $arrow-border-position);
      @include create-flow-property("right", auto);
      top: $edge-offset;
      bottom: auto;
    }
  }
}

@mixin create-input-field-base-styles {
  background: $form-input-bg;
  appearance: none;
  border-radius: $form-input-border-radius;
  border: $form-input-border;
  box-shadow: $form-input-box-shadow;
  font-family: $form-input-font-family;
  font-size: $form-input-font-size;
  margin: $form-input-margin;
  padding: $form-input-padding;
}

@mixin create-input-field-interactive-styles {
  transition: $global-transition;

  &:focus,
  &:active {
    background: $form-input-focus-bg !important;
    border: $form-input-focus-border !important;
    box-shadow: $form-input-focus-box-shadow !important;
  }

  &:hover {
    background: $form-input-hover-bg;
    border: $form-input-hover-border;
    box-shadow: $form-input-hover-box-shadow;
    transition: $global-transition;
  }
}

@mixin create-input-disabled-styles {
  background: $form-input-disabled-bg !important;
  border: $form-input-disabled-border !important;
  color: $form-input-disabled-color !important;
  cursor: not-allowed;
  resize: $form-input-disabled-resize !important;
  opacity: 1;

  &:hover {
    background: $form-input-disabled-bg !important;
    border: $form-input-disabled-border !important;
    color: $form-input-disabled-color !important;
  }
}

@mixin create-input-of-type-disabled($type) {
  input[type="#{$type}"]:disabled,
  input[type="#{$type}"].is-disabled {
    @include create-input-disabled-styles;
  }
}
