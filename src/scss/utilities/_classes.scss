// Keyboard focus modifier - only included if $scope is left empty.
// If $scope is defined, using-keyboard is included via `_scope-overrides.scss`

@if $scope == "" {
  @include net-create-using-keyboard-class;
}

// `font-family` modifiers

.has-sans-text {
  font-family: $global-font-sans !important;
}

.has-serif-text {
  font-family: $global-font-serif !important;
}

// `font-weight` modifiers

.has-bold-text {
  font-weight: $global-font-weight-bold !important;
}

.has-italic-text {
  font-style: $global-font-style-italic !important;
}

// `text-align` modifiers

.has-text-start {
  @include net-set-flow("text-align", left !important);
}

.has-text-center {
  text-align: center !important;
}

.has-text-end {
  @include net-set-flow("text-align", right !important);
}

// `color` modifier for text and backgrounds

@each $name, $color in $full-palette {
  .has-#{$name}-text {
    color: $color !important;
  }

  .has-#{$name}-bg {
    background-color: $color !important;
  }
}

// `display` modifiers

@each $size, $value in $breakpoints {
  $breakpoint-index: index($breakpoints, ($size $value));

  // If the index is on the first item in $breakpoints
  @if $breakpoint-index == 1 {
    .has-display-flex {
      display: flex !important;
    }

    .has-display-block {
      display: block !important;
    }

    .has-display-none {
      display: none !important;
    }
  } @else {
    @include net-breakpoint($size) {
      @include net-create-visibility-classes($size);
    } // end @include
  } // end @if
} // end @each

// `flex-direction` modifiers

@each $property in row, column {
  .has-direction-#{$property} {
    flex-direction: $property !important;
  }
}

// `justify-content` modifiers

@each $property in center, flex-end, flex-start, space-around, space-between {
  .has-justify-content-#{$property} {
    justify-content: $property !important;
  }
}

// `align-items` modifiers

@each $property in center, flex-end, flex-start, stretch {
  .has-align-items-#{$property} {
    align-items: $property !important;
  }
}

// `align-content` modifiers

@each $property in center, flex-end, flex-start, space-around, space-between, stretch {
  .has-align-content-#{$property} {
    align-content: $property !important;
  }
}

// `flex-grow` and `flex-shrink` modifiers

@each $value in 0, 1 {
  .has-grow-#{$value} {
    flex-grow: $value !important;
  }

  .has-shrink-#{$value} {
    flex-shrink: $value !important;
  }
}

// `margin` and `padding` modifiers on all sides

.has-padding {
  padding: $global-space !important;
}

.has-margin {
  margin: $global-space !important;
}

$flow-map: (
  "inline-start": "left",
  "inline-end": "right",
  "block-start": "top",
  "block-end": "bottom"
);

// // `margin` and `padding` modifiers on a single side only
// e.g., `has-padding-inline-start`
// or `has-margin-block-end`

@each $spacing-type in "padding", "margin" {
  @each $flow-type, $flow-value in $flow-map {
    @if $flow-value == "left" or $flow-value == "right" {
      .has-#{$spacing-type}-#{$flow-type} {
        @include net-set-flow("#{$spacing-type}-#{$flow-value}", $global-space !important);
      }
    } @else {
      .has-#{$spacing-type}-#{$flow-type} {
        #{$spacing-type}-#{$flow-value}: $global-space !important;
      }
    } // end @if
  } // end @each
} // end @each

// 1. `margin` and `padding` modifiers on all sides, for each spacing increment
// 2. `margin` and `padding` modifiers on a single side only, for each spacing increment

@each $spacing-size, $spacing-value in $spacing-increments {
  // 1
  .has-padding-#{$spacing-size} {
    padding: $spacing-value !important;
  }

  .has-margin-#{$spacing-size} {
    margin: $spacing-value !important;
  }

  // 2
  @each $spacing-type in "padding", "margin" {
    @each $flow-type, $flow-value in $flow-map {
      @if $flow-value == "left" or $flow-value == "right" {
        .has-#{$spacing-type}-#{$flow-type}-#{$spacing-size} {
          @include net-set-flow("#{$spacing-type}-#{$flow-value}", $spacing-value !important);
        }
      } @else {
        .has-#{$spacing-type}-#{$flow-type}-#{$spacing-size} {
          #{$spacing-type}-#{$flow-value}: $spacing-value !important;
        }
      }
    } // end @if
  } // end @each
} // end @each

// `margin` and `padding` modifiers remove from all sides

.has-no-margin {
  margin: 0 !important;
}

.has-no-padding {
  padding: 0 !important;
}

// `margin` and `padding` modifiers remove from a single side only

@each $spacing-type in "padding", "margin" {
  @each $flow-type, $flow-value in $flow-map {
    @if $flow-value == "left" or $flow-value == "right" {
      .has-no-#{$spacing-type}-#{$flow-type} {
        @include net-set-flow("#{$spacing-type}-#{$flow-value}", 0 !important);
      }
    } @else {
      .has-no-#{$spacing-type}-#{$flow-type} {
        #{$spacing-type}-#{$flow-value}: 0 !important;
      }
    } // end @if
  } // end @each
} // end @each

// List style modifier

.has-unstyled-list {
  @include net-set-flow("padding-left", 0 !important);
  list-style-type: none !important;
}

// Visually hide an element, but leave it available for screen readers
// https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/main.css
// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
// https://gomakethings.com/hidden-content-for-better-a11y/

%visually-hidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  white-space: nowrap !important;
  width: 1px !important;
}

%not-visually-hidden {
  clip: auto !important;
  height: auto !important;
  margin: 0 !important;
  overflow: visible !important;
  position: static !important;
  white-space: normal !important;
  width: auto !important;
}

.is-visually-hidden {
  @extend %visually-hidden;
}

// Extends the .is-visually-hidden class to allow the element to be focusable when navigated to via the keyboard
// https://github.com/h5bp/html5-boilerplate/blob/master/dist/css/main.css
// https://www.drupal.org/node/897638

.is-visually-hidden-focusable {
  @extend %visually-hidden;

  &:active,
  &:focus {
    @extend %not-visually-hidden;
  }
}

// Revert `is-visually-hidden` class.
// Will always ensure an element is normally visible even if hidden classes are present.

.is-not-visually-hidden {
  @extend %not-visually-hidden;

  &:active,
  &:focus {
    @extend %not-visually-hidden;
  }
}
