{"version":3,"file":"undernet.bundle.min.js","sources":["../js/src/utils.js","../js/src/components/modal.js","../js/src/components/accordion.js","../js/src/undernet.js"],"sourcesContent":["\"use strict\"\n\nconst keyCodes = {\n  SHIFT: 16,\n  TAB: 9,\n}\n\nconst selectors = {\n  FOCUSABLE_SELECTOR: \":not(.is-visually-hidden)\",\n  FOCUSABLE_TAGS: [\"a\", \"button\", \"input\", \"object\", \"select\", \"textarea\", \"[tabindex]\"],\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n}\n\n/**\n * Utility methods for DOM traversal and focus trapping.\n * @module Utils\n */\nexport default class Utils {\n  constructor() {\n    // bind events to Utils\n    this.handleFocusTrap = this.handleFocusTrap.bind(this)\n  }\n\n  /**\n   * Because IE does not recognize NodeList.forEach(), we use a cross-browser solution for returning an array of DOM nodes.\n   * @param {String} element - A DOM node's class, attribute, etc., to search the document.\n   * @return {Array}\n   */\n  getElements(element) {\n    const nodeList = document.querySelectorAll(element)\n    return Array.apply(null, nodeList)\n  }\n\n  /**\n   * Creates a string of element selector patterns using common elements.\n   * @param {String} container - The enclosing container's class, attribute, etc.\n   * @return {String}\n   */\n  getFocusableElements(container) {\n    let focusables = []\n    selectors.FOCUSABLE_TAGS.map(element =>\n      focusables.push(`${container} ${element}${selectors.FOCUSABLE_SELECTOR}`),\n    )\n    return this.getElements(focusables.join(\", \"))\n  }\n\n  /**\n   * Listens to the first and last elements matched from this.getFocusableElements()\n   * @param {String} container - The container's class, attribute, etc.\n   */\n  captureFocus(container) {\n    this.focusContainer = container\n    const children = this.getFocusableElements(this.focusContainer)\n    this.focusableFirstChild = children[0]\n    this.focusableLastChild = children[children.length - 1]\n\n    document.addEventListener(events.KEYDOWN, this.handleFocusTrap)\n  }\n\n  /**\n   * Handles focus on first or last child in a container.\n   * @param {Object} event - Event (keypress)\n   */\n  handleFocusTrap(event) {\n    const active = document.activeElement\n    const containerElement = document.querySelector(this.focusContainer)\n    const containerActive = active === containerElement\n    const firstActive = active === this.focusableFirstChild\n    const lastActive = active === this.focusableLastChild\n    const tabKey = event.which === keyCodes.TAB\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const hasShift = shiftKey && tabKey\n    const noShift = !shiftKey && tabKey\n\n    // Just in case the first or last child have changed -\n    // recapture focus and continue trapping.\n    this.releaseFocus()\n    this.captureFocus(this.focusContainer)\n\n    if (hasShift && (firstActive || containerActive)) {\n      event.preventDefault()\n      this.focusableLastChild.focus()\n    } else if (noShift && lastActive) {\n      event.preventDefault()\n      this.focusableFirstChild.focus()\n    }\n  }\n\n  /**\n   * Stop trapping focus set in this.captureFocus()\n   */\n  releaseFocus() {\n    document.removeEventListener(events.KEYDOWN, this.handleFocusTrap)\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  ESCAPE: 27,\n}\n\nconst selectors = {\n  // unique\n  MODAL_CONTAINER: \"data-modal\",\n  MODAL_ID: \"data-modal-id\",\n  MODAL_BUTTON: \"data-modal-button\",\n  NO_SCROLL: \"no-scroll\",\n  // common\n  VISIBLE: \"data-visible\",\n  CLOSE: \"data-close\",\n  TARGET: \"data-target\",\n  // aria\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_MODAL: \"aria-modal\",\n  ROLE: \"role\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n  RESIZE: \"resize\",\n}\n\nconst messages = {\n  MISSING_MODAL:\n    \"Your button is missing its corresponding modal. Check to make sure your modal is in the DOM, and that it has a [data-modal-id=*] attribute matchin its [data-modal-button] and [data-target] attributes. It's possible the modal script ran before the button appeared on the page!\",\n}\n\n/**\n * Modal component class.\n * @module Modal\n * @requires Utils\n */\nexport default class Modal extends Utils {\n  constructor() {\n    super()\n    this.modalContainerAttr = `[${selectors.MODAL_CONTAINER}]`\n    this.closeButtonAttr = `[${selectors.MODAL_CONTAINER}] [${selectors.CLOSE}]`\n    this.modals = null\n    this.modalButtons = null\n    this.closeButtons = null\n    this.bodyTag = document.body\n    this.htmlTag = document.querySelector(\"html\")\n\n    // bind events to class\n    this.getModal = this.getModal.bind(this)\n    this.handleModalClose = this.handleModalClose.bind(this)\n    this.handleEscapeKeyPress = this.handleEscapeKeyPress.bind(this)\n    this.handleOverlayClick = this.handleOverlayClick.bind(this)\n  }\n\n  /**\n   * Add accessible attributes to modal containers\n   * Begin listening to elements with [data-modal-button]\n   */\n  start() {\n    this.modals = this.getElements(this.modalContainerAttr)\n    this.modalButtons = this.getElements(`[${selectors.MODAL_BUTTON}]`)\n    this.closeButtons = this.getElements(this.closeButtonAttr)\n\n    if (this.modals.length) {\n      this.modals.forEach(modal => {\n        modal.setAttribute(selectors.ARIA_MODAL, \"true\")\n        modal.parentNode.setAttribute(selectors.ARIA_HIDDEN, \"true\")\n        modal.parentNode.setAttribute(selectors.VISIBLE, \"false\")\n        modal.setAttribute(selectors.ROLE, \"dialog\")\n      })\n    }\n\n    if (this.modalButtons.length) {\n      this.modalButtons.forEach(button => {\n        button.addEventListener(events.CLICK, this.getModal)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to modal buttons\n   */\n  stop() {\n    this.modalButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this.getModal)\n    })\n  }\n\n  /**\n   * Locate a button's corresponding modal container.\n   * @param {Object} event - The event object\n   */\n  getModal(event) {\n    event.preventDefault()\n    this.renderModal(event)\n  }\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   */\n  renderModal(event) {\n    this.modalButton = event.target\n    this.activeModalId = this.modalButton.getAttribute(selectors.TARGET)\n    this.modalOverlayAttr = `[${selectors.MODAL_ID}='${this.activeModalId}']`\n    this.modalOverlay = document.querySelector(this.modalOverlayAttr)\n\n    if (!this.modalOverlay) {\n      throw messages.MISSING_MODAL\n      return\n    }\n\n    this.activeModalSelector = `${this.modalOverlayAttr} ${this.modalContainerAttr}`\n    this.activeModal = document.querySelector(this.activeModalSelector)\n    this.modalCloseButtons = this.getElements(`${this.modalOverlayAttr} ${this.closeButtonAttr}`)\n\n    this.handleScrollStop()\n    this.captureFocus(this.activeModalSelector)\n    this.modalOverlay.setAttribute(selectors.ARIA_HIDDEN, \"false\")\n    this.activeModal.setAttribute(\"tabindex\", \"-1\")\n    this.modalOverlay.setAttribute(selectors.VISIBLE, \"true\")\n    this.activeModal.focus()\n\n    // offset slight scroll caused by this.activeModal.focus()\n    this.modalOverlay.scrollTop = 0\n\n    // begin listening to events\n    document.addEventListener(events.KEYDOWN, this.handleEscapeKeyPress)\n    document.addEventListener(events.CLICK, this.handleOverlayClick)\n    this.modalCloseButtons.forEach(button => {\n      button.addEventListener(events.CLICK, this.handleModalClose)\n    })\n  }\n\n  /**\n   * Turn off event listeners and reset focus to last selected DOM node (button)\n   * @param {Object} event - Event (keydown or click)\n   */\n  handleModalClose(event) {\n    event.preventDefault()\n    this.modalOverlay.setAttribute(selectors.VISIBLE, \"false\")\n    this.handleReturnFocus()\n    this.handleScrollRestore()\n    this.releaseFocus()\n    this.modalOverlay.setAttribute(selectors.ARIA_HIDDEN, \"true\")\n    this.activeModal.removeAttribute(\"tabindex\")\n\n    // stop listening to events\n    document.removeEventListener(events.KEYDOWN, this.handleEscapeKeyPress)\n    document.removeEventListener(events.CLICK, this.handleOverlayClick)\n    this.modalCloseButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this.handleModalClose)\n    })\n  }\n\n  /**\n   * Handles click event on the modal background to close it.\n   * @param {Object} event - Event (keydown)\n   */\n  handleOverlayClick(event) {\n    if (event.target !== this.modalOverlay) return\n    this.handleModalClose(event)\n  }\n\n  /**\n   * Handles escape key event to close the current modal\n   * @param {Object} event - Event (keydown)\n   */\n  handleEscapeKeyPress(event) {\n    const escapeKey = event.which === keyCodes.ESCAPE\n    if (escapeKey) {\n      this.handleModalClose(event)\n    }\n  }\n\n  /**\n   * Returns focus to the last focused element before the modal was called.\n   * @param {Object} button - The current modal's corresponding button.\n   */\n  handleReturnFocus() {\n    this.modalButton.setAttribute(\"tabindex\", \"-1\")\n    this.modalButton.focus()\n    this.modalButton.removeAttribute(\"tabindex\")\n  }\n\n  /**\n   * Restores scroll behavior to <html> and <body>\n   */\n  handleScrollRestore() {\n    this.bodyTag.classList.remove(selectors.NO_SCROLL)\n    this.htmlTag.classList.remove(selectors.NO_SCROLL)\n  }\n\n  /**\n   * Prevents scroll behavior on <html> and <body>\n   */\n  handleScrollStop() {\n    this.bodyTag.classList.add(selectors.NO_SCROLL)\n    this.htmlTag.classList.add(selectors.NO_SCROLL)\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  SPACE: 32,\n}\n\nconst selectors = {\n  // unique\n  ACCORDION_CONTAINER: \"data-accordion\",\n  ACCORDION_ROW: \"data-accordion-row\",\n  // common\n  EXPANDED: \"data-expanded\",\n  TARGET: \"data-target\",\n  CONTENT: \"data-content\",\n  TOGGLE_MULTIPLE: \"data-toggle-multiple\",\n  PARENT: \"data-parent\",\n  // aria\n  ARIA_EXPANDED: \"aria-expanded\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_HIDDEN: \"aria-hidden\",\n}\n\nconst events = {\n  CLICK: \"click\",\n  KEYDOWN: \"keydown\",\n}\n\nconst messages = {\n  MISSING_CONTENT:\n    \"You have an accordion button that is missing its [data-content] attribute, and has a matching id to the button's [data-target] attribute's value.\",\n}\n\n/**\n * Accordion component class.\n * @module Accordion\n * @requires Utils\n */\nexport default class Accordion extends Utils {\n  constructor() {\n    super()\n    this.accordionButtons = null\n    this.accordionContents = null\n    this.activeContainer = null\n\n    // bind events to class\n    this.renderAccordionContent = this.renderAccordionContent.bind(this)\n    this.handleSpaceKeyPress = this.handleSpaceKeyPress.bind(this)\n  }\n\n  /**\n   * Add accessible attributes [data-accordion-button] and [data-accordion-content] elements\n   * Begin listening to [data-accordion-button] elements\n   */\n  start() {\n    this.accordionButtons = this.getElements(\n      `[${selectors.ACCORDION_CONTAINER}] [${selectors.TARGET}]`,\n    )\n    this.accordionContents = this.getElements(\n      `[${selectors.ACCORDION_CONTAINER}] [${selectors.CONTENT}]`,\n    )\n\n    if (this.accordionButtons.length) {\n      this.accordionButtons.forEach(button => {\n        this.setupButton(button)\n        button.addEventListener(events.CLICK, this.renderAccordionContent)\n        button.addEventListener(events.KEYDOWN, this.handleSpaceKeyPress)\n      })\n    }\n\n    if (this.accordionContents.length) {\n      this.accordionContents.forEach(content => {\n        const contentRowAttr = this.getAccordionRowAttr(content.id)\n        const contentRow = document.querySelector(contentRowAttr)\n        const contentHiddenState = contentRow.getAttribute(selectors.EXPANDED)\n        const toggleContentHiddenState = contentHiddenState === \"true\" ? \"false\" : \"true\"\n        content.setAttribute(selectors.ARIA_HIDDEN, toggleContentHiddenState)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to accordion buttons.\n   */\n  stop() {\n    this.accordionButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this.renderAccordionContent)\n      button.removeEventListener(events.KEYDOWN, this.handleSpaceKeyPress)\n    })\n  }\n\n  setupButton(button) {\n    const buttonId = button.getAttribute(selectors.TARGET)\n    const accordionRowAttr = this.getAccordionRowAttr(buttonId)\n    const accordionRow = document.querySelector(accordionRowAttr)\n    const shouldContentExpand = accordionRow.getAttribute(selectors.EXPANDED)\n    const buttonContent = document.getElementById(buttonId)\n\n    button.setAttribute(selectors.ARIA_CONTROLS, buttonId)\n\n    if (shouldContentExpand === \"true\") {\n      buttonContent.style.maxHeight = `${buttonContent.scrollHeight}px`\n      button.setAttribute(selectors.ARIA_EXPANDED, \"true\")\n    } else {\n      button.setAttribute(selectors.ARIA_EXPANDED, \"false\")\n    }\n  }\n\n  /**\n   * Return a selector that targets `selectors.ACCORDION_ROW` with value of the id.\n   * @param {String} id - An id value associated with a given selectors.TARGET\n   * @return {String}\n   */\n  getAccordionRowAttr(id) {\n    return `[${selectors.ACCORDION_ROW}='${id}']`\n  }\n\n  /**\n   * Open accordion content associated with a [data-accordion-button] element.\n   * @param {Object} event - The event object.\n   */\n  renderAccordionContent(event) {\n    event.preventDefault()\n\n    this.activeButton = event.target\n    const activeAccordionRow = this.activeButton.getAttribute(selectors.TARGET)\n\n    this.activeRowAttr = this.getAccordionRowAttr(activeAccordionRow)\n    this.activeRow = document.querySelector(this.activeRowAttr)\n    this.activeContainerId = this.activeButton.getAttribute(selectors.PARENT)\n    this.activeContainerAttr = `[${selectors.ACCORDION_CONTAINER}='${this.activeContainerId}']`\n    this.activeContainer = document.querySelector(this.activeContainerAttr)\n\n    this.activeContent = document.getElementById(activeAccordionRow)\n\n    const accordionContentHasAttr = this.activeContent.hasAttribute(selectors.CONTENT)\n    if (!accordionContentHasAttr) {\n      throw messages.MISSING_CONTENT\n      return\n    }\n\n    const accordionButtonState = this.activeRow.getAttribute(selectors.EXPANDED)\n    const accordionContentState = this.activeContent.getAttribute(selectors.CONTENT)\n\n    this.toggleExpandState = accordionButtonState === \"true\" ? \"false\" : \"true\"\n    this.toggleContentState = accordionContentState === \"visible\" ? \"hidden\" : \"visible\"\n    this.toggleHiddenState = this.toggleExpandState === \"false\" ? \"true\" : \"false\"\n\n    this.closeAllIfToggleable()\n    this.toggleSelectedAccordion()\n  }\n\n  /**\n   * If a keypress is the spacebar on a button, open its correlated content.\n   * @param {Object} event - The event object.\n   */\n  handleSpaceKeyPress(event) {\n    if (event.which === keyCodes.SPACE) this.renderAccordionContent(event)\n  }\n\n  /**\n   * If toggling multiple rows at once isn't enabled, close all rows except the selected one.\n   * This ensures the selected one can be closed if it's already open.\n   */\n  closeAllIfToggleable() {\n    if (this.activeContainer.hasAttribute(selectors.TOGGLE_MULTIPLE)) return\n    const allRows = this.getElements(`${this.activeContainerAttr} [${selectors.EXPANDED}]`)\n    const allContent = this.getElements(`${this.activeContainerAttr} [${selectors.CONTENT}]`)\n    const allButtons = this.getElements(`${this.activeContainerAttr} [${selectors.TARGET}]`)\n\n    allContent.forEach(content => {\n      if (!(content === this.activeContent)) content.style.maxHeight = null\n    })\n\n    this.toggleAttributeInCollection(allRows, selectors.EXPANDED, \"true\", \"false\")\n    this.toggleAttributeInCollection(allButtons, selectors.ARIA_EXPANDED, \"true\", \"false\")\n    this.toggleAttributeInCollection(allContent, selectors.ARIA_HIDDEN, \"false\", \"true\")\n    this.toggleAttributeInCollection(allContent, selectors.CONTENT, \"visible\", \"hidden\")\n  }\n\n  /**\n   * Toggle a [data-accordion-button]'s related [data-accordion-content] element.\n   */\n  toggleSelectedAccordion() {\n    this.activeRow.setAttribute(selectors.EXPANDED, this.toggleExpandState)\n    this.activeContent.setAttribute(selectors.CONTENT, this.toggleContentState)\n    this.activeButton.setAttribute(selectors.ARIA_EXPANDED, this.toggleExpandState)\n    this.activeContent.setAttribute(selectors.ARIA_HIDDEN, this.toggleHiddenState)\n\n    if (this.activeContent.style.maxHeight) {\n      this.activeContent.style.maxHeight = null\n    } else {\n      this.activeContent.style.maxHeight = `${this.activeContent.scrollHeight}px`\n    }\n  }\n\n  /**\n   * Toggles a single attribute of a series of elements within a parent.\n   */\n  toggleAttributeInCollection(elements, attributeName, currentValue, newValue) {\n    elements.forEach(element => {\n      if (element.hasAttribute(attributeName, currentValue)) {\n        element.setAttribute(attributeName, newValue)\n      }\n    })\n  }\n}\n","\"use strict\"\n\nimport Modal from \"./components/modal\"\nimport Accordion from \"./components/accordion\"\n\nconst Modals = new Modal()\nconst Accordions = new Accordion()\n\nconst Undernet = {\n  Modals,\n  Accordions,\n}\n\nUndernet.start = () => {\n  Undernet.Modals.start()\n  Undernet.Accordions.start()\n}\n\nUndernet.stop = () => {\n  Undernet.Modals.stop()\n  Undernet.Accordions.stop()\n}\n\nwindow.Undernet = Undernet\nexport default Undernet\n"],"names":["keyCodes","selectors","FOCUSABLE_SELECTOR","FOCUSABLE_TAGS","events","Utils","handleFocusTrap","this","bind","element","nodeList","document","querySelectorAll","Array","apply","container","focusables","map","push","getElements","join","focusContainer","children","getFocusableElements","focusableFirstChild","focusableLastChild","length","addEventListener","event","active","activeElement","containerActive","querySelector","firstActive","lastActive","tabKey","which","shiftKey","hasShift","noShift","releaseFocus","captureFocus","preventDefault","focus","removeEventListener","messages","Modal","modalContainerAttr","closeButtonAttr","modals","modalButtons","closeButtons","bodyTag","body","htmlTag","getModal","_this","handleModalClose","handleEscapeKeyPress","handleOverlayClick","forEach","modal","setAttribute","parentNode","button","_this2","_this3","renderModal","modalButton","target","activeModalId","getAttribute","modalOverlayAttr","modalOverlay","activeModalSelector","activeModal","modalCloseButtons","handleScrollStop","scrollTop","_this4","handleReturnFocus","handleScrollRestore","removeAttribute","_this5","classList","remove","add","Accordion","accordionButtons","accordionContents","activeContainer","renderAccordionContent","handleSpaceKeyPress","setupButton","content","contentRowAttr","getAccordionRowAttr","id","toggleContentHiddenState","buttonId","accordionRowAttr","shouldContentExpand","buttonContent","getElementById","style","maxHeight","scrollHeight","activeButton","activeAccordionRow","activeRowAttr","activeRow","activeContainerId","activeContainerAttr","activeContent","hasAttribute","accordionButtonState","accordionContentState","toggleExpandState","toggleContentState","toggleHiddenState","closeAllIfToggleable","toggleSelectedAccordion","allRows","allContent","allButtons","toggleAttributeInCollection","elements","attributeName","currentValue","newValue","Undernet","Modals","Accordions","start","stop","window"],"mappings":"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"}